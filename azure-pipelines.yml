# Xamarin.Android
# Build a Xamarin.Android project.
# Add steps that test, sign, and distribute an app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xamarin

trigger:
- master

jobs:

- job: Android
  pool:
    vmImage: 'VS2017-Win2016'

  variables:
    buildConfiguration: 'Release'
    outputDirectory: '$(build.binariesDirectory)/$(buildConfiguration)'

  steps:
  - task: NuGetToolInstaller@0

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '**/*.sln'
      
  - task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063157.SonarQubePrepare@4
    displayName: 'Fake'
    inputs:
      SonarQube: 'Foo'
      projectKey: 'Foo2'
		 
  - script: D:\a\_tasks\SonarQubePrepare_15b84ca1-b62f-4a2a-a403-89b77a063157\4.5.1\classic-sonar-scanner-msbuild\SonarScanner.MSBuild.exe begin /k:"hacky1610_hairapp" /d:sonar.organization="hacky1610-github" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="2f64293c5814c5083e17392c178f0f963ad54ae9"
    displayName: 'SQ'

  - task: XamarinAndroid@1
    inputs:
      projectFile: '**/*droid*.csproj'
      outputDirectory: '$(outputDirectory)'
      configuration: '$(buildConfiguration)'

  - task: MSBuild@1
    inputs:
      solution: '**/*Test.sln' 
      configuration: '$(buildConfiguration)'
      msbuildArguments: '/p:OutputPath=$(outputDirectory)\test'

  - task: DotNetCoreCLI@2
    inputs:
      command: test
      projects: '**/*test.csproj'
      arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
	
  - script: D:\a\_tasks\SonarQubePrepare_15b84ca1-b62f-4a2a-a403-89b77a063157\4.5.1\classic-sonar-scanner-msbuild\SonarScanner.MSBuild.exe end /d:sonar.login="2f64293c5814c5083e17392c178f0f963ad54ae9"
    displayName: 'SQ Analyse'

  - task: AndroidSigning@3
    inputs:
      apksign: false
      zipalign: false
      apkFiles: '$(outputDirectory)/*.apk'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(outputDirectory)'

- job: iOS
  pool:
    vmImage: 'macOS 10.13'

  steps:
  # To manually select a Xamarin SDK version on the Hosted macOS agent, enable this script with the SDK version you want to target
  # https://go.microsoft.com/fwlink/?linkid=871629
  - script: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh 5_4_1 
    displayName: 'Select Xamarin SDK version'
    enabled: false

  - task: NuGetToolInstaller@0

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '**/*.sln'

  #- task: XamariniOS@2
  #  inputs:
  #    solutionFile: '**/*.sln'
  #    configuration: 'Release'
  #    buildForSimulator: true
  #    packageApp: false
