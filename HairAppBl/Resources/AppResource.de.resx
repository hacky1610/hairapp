<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EveryDays" xml:space="preserve">
    <value>Jede {count} Tage</value>
  </data>
  <data name="EveryDay" xml:space="preserve">
    <value>Jeden Tag</value>
  </data>
  <data name="EveryWeek" xml:space="preserve">
    <value>Jeden {days} jede {count} Woche</value>
  </data>
  <data name="MonthlyText" xml:space="preserve">
    <value>Jeden {occurence} {day} jeden {month} Monat</value>
  </data>
  <data name="Daily" xml:space="preserve">
    <value>Täglich</value>
  </data>
  <data name="Monthly" xml:space="preserve">
    <value>Monatlich</value>
  </data>
  <data name="Weekly" xml:space="preserve">
    <value>Wöchentlich</value>
  </data>
  <data name="Yearly" xml:space="preserve">
    <value>Jährlich</value>
  </data>
  <data name="First" xml:space="preserve">
    <value>Erster</value>
  </data>
  <data name="Second" xml:space="preserve">
    <value>Zweiter</value>
  </data>
  <data name="Third" xml:space="preserve">
    <value>Dritter</value>
  </data>
  <data name="Fourth" xml:space="preserve">
    <value>Vierter</value>
  </data>
  <data name="Last" xml:space="preserve">
    <value>Letzter</value>
  </data>
  <data name="Monday" xml:space="preserve">
    <value>Montag</value>
  </data>
  <data name="Tuesdays" xml:space="preserve">
    <value>Dienstag</value>
  </data>
  <data name="Wednesday" xml:space="preserve">
    <value>Mittwoch</value>
  </data>
  <data name="Thursday" xml:space="preserve">
    <value>Donnerstag</value>
  </data>
  <data name="Friday" xml:space="preserve">
    <value>Freitag</value>
  </data>
  <data name="Saturday" xml:space="preserve">
    <value>Samstag</value>
  </data>
  <data name="Sunday" xml:space="preserve">
    <value>Sonntag</value>
  </data>
  <data name="TimeForHairCare" xml:space="preserve">
    <value>Zeit für deinen Washtag</value>
  </data>
  <data name="TodayIs" xml:space="preserve">
    <value>Heute ist:</value>
  </data>
  <data name="ReminderForHairCare" xml:space="preserve">
    <value>Erinnerung für deinen Washtag</value>
  </data>
  <data name="TomorrowIs" xml:space="preserve">
    <value>Morgen ist:</value>
  </data>
  <data name="Prepoo" xml:space="preserve">
    <value>Pre-poo</value>
  </data>
  <data name="PrepooDescription" xml:space="preserve">
    <value>Eine Ölbehandlung, die vor dem Shampoonieren oder Konditionieren auf das Haar aufgetragen wird</value>
  </data>
  <data name="HotOilTreatment" xml:space="preserve">
    <value>Behandlung mit heißem Öl</value>
  </data>
  <data name="HotOilTreatmentDescription" xml:space="preserve">
    <value>Wasche deine Haare. Machen Sie ein Wasserbad. Erhitze dein Kokosöl. Nasses Haar, wenn es nicht schon nass ist. Massieren Sie das Öl mit in heißes Öl getauchten Fingerspitzen in Ihre Kopfhaut. Erhitzen Sie ein Handtuch mit einem Haartrockner oder Wäschetrockner. Haare gründlich waschen und ausspülen</value>
  </data>
  <data name="Shampoo" xml:space="preserve">
    <value>Shampoo</value>
  </data>
  <data name="ShampooDescription" xml:space="preserve">
    <value>Waschen Sie Ihre Haare mit Shampoo</value>
  </data>
  <data name="ClarifyingShampooDescription" xml:space="preserve">
    <value>Für beste Ergebnisse. Massieren Sie das Clarifying Shampoo in die Wurzeln, in denen sich die meisten Produkte ansammeln, und verteilen Sie das Shampoo dann auf dem restlichen Haar.</value>
  </data>
  <data name="ClarifyingShampoo" xml:space="preserve">
    <value>Clarifying Shampoo</value>
  </data>
  <data name="ConditionerDescription" xml:space="preserve">
    <value>Wasche dein Haar. Spüle dein Shampoo aus. Wringe dein Haar aus. Trage deine Spülung auf.
Lass die Spülung einwirken.Spüle die Spülung aus</value>
  </data>
  <data name="Conditioner" xml:space="preserve">
    <value>Conditioner</value>
  </data>
  <data name="DeepConditioner" xml:space="preserve">
    <value>Deep Conditioner</value>
  </data>
  <data name="DeepConditionerDescription" xml:space="preserve">
    <value>Bedecken Sie Ihr Haar nach dem Auftragen einer tiefen Spülung mit einer Duschhaube oder einer Plastiktüte und fügen Sie geringe Wärme hinzu (wickeln Sie ein warmes, feuchtes Handtuch um Ihren Kopf.) Dadurch wird die Nagelhaut geöffnet und die tiefe Spülung kann in Ihr Haar eindringen. Mindestens 20 Minuten im DC belassen (wir empfehlen 20-40).</value>
  </data>
  <data name="ProteinTreatment" xml:space="preserve">
    <value>Protein Treatment</value>
  </data>
  <data name="ProteinTreatmentDescription" xml:space="preserve">
    <value>Genau wie Ihr Körper braucht Ihr Haar Eiweiß, um gesund zu bleiben. ... Proteinbehandlungen stärken das Haar mit einer Vielzahl von Nährstoffen und Proteinen, um die Haarsträhnen wieder aufzubauen und zu stärken.</value>
  </data>
  <data name="MoisturisingMask" xml:space="preserve">
    <value>Feuchtigkeitsmaske</value>
  </data>
  <data name="MoisturisingMaskDescription" xml:space="preserve">
    <value>Teilen Sie Ihr Haar in der Mitte und tragen Sie es zunächst auf die Kopfhaut auf. Lassen Sie diese Maske 30-45 Minuten einwirken und spülen Sie sie dann mit Ihrem normalen Shampoo und Conditioner aus. Diese Maske ist am besten und effektivsten, wenn sie einmal pro Woche angewendet wird</value>
  </data>
  <data name="LeaveInConditioner" xml:space="preserve">
    <value>Leave in Conditioner</value>
  </data>
  <data name="LeaveInConditionerDescription" xml:space="preserve">
    <value>
Wasche dein Haar mit Shampoo und trage den Conditioner auf.Gib eine kleine Menge Serum in deine Handfläche.Reibe das Produkt in dein Haar ein.Kämme dein Haar.</value>
  </data>
  <data name="Clay" xml:space="preserve">
    <value>Lehm</value>
  </data>
  <data name="ClayDescription" xml:space="preserve">
    <value>Spülen Sie Ihr Haar mit Wasser aus, um es zu befeuchten. Nehmen Sie jeweils eine Handvoll Haare auf und tragen Sie die Bentonit-Ton-Maske von den Wurzeln bis zu den Spitzen auf. Wenn Ihr Haar zu trocknen beginnt, befeuchten Sie es erneut mit Hilfe einer Sprühflasche. Rollen Sie Ihre Haare auf und setzen Sie eine Duschhaube auf</value>
  </data>
  <data name="Rinse" xml:space="preserve">
    <value>Spülung</value>
  </data>
  <data name="RinseDescription" xml:space="preserve">
    <value>Wasch deine Haare. Spüle es aus. Trage eine kleine Menge Spülung auf.Massiere es in die Haare ein. Warte zwei Minuten. Spüle das Haar aus.</value>
  </data>
</root>