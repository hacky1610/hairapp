<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EveryDays" xml:space="preserve">
    <value>Every {count} days</value>
  </data>
  <data name="EveryDay" xml:space="preserve">
    <value>Every day</value>
  </data>
  <data name="EveryWeek" xml:space="preserve">
    <value>Every {days} each {count} week</value>
  </data>
  <data name="MonthlyText" xml:space="preserve">
    <value>At {occurence} {day} every {month} month</value>
  </data>
  <data name="Daily" xml:space="preserve">
    <value>Daily</value>
  </data>
  <data name="Monthly" xml:space="preserve">
    <value>Monthly</value>
  </data>
  <data name="Weekly" xml:space="preserve">
    <value>Weekly</value>
  </data>
  <data name="Yearly" xml:space="preserve">
    <value>Yearly</value>
  </data>
  <data name="First" xml:space="preserve">
    <value>First</value>
  </data>
  <data name="Second" xml:space="preserve">
    <value>Second</value>
  </data>
  <data name="Third" xml:space="preserve">
    <value>Third</value>
  </data>
  <data name="Fourth" xml:space="preserve">
    <value>Fourth</value>
  </data>
  <data name="Last" xml:space="preserve">
    <value>Last</value>
  </data>
  <data name="Monday" xml:space="preserve">
    <value>Monday</value>
  </data>
  <data name="Tuesdays" xml:space="preserve">
    <value>Tuesday</value>
  </data>
  <data name="Wednesday" xml:space="preserve">
    <value>Wednesday</value>
  </data>
  <data name="Thursday" xml:space="preserve">
    <value>Thursday</value>
  </data>
  <data name="Friday" xml:space="preserve">
    <value>Friday</value>
  </data>
  <data name="Saturday" xml:space="preserve">
    <value>Saturday</value>
  </data>
  <data name="Sunday" xml:space="preserve">
    <value>Sunday</value>
  </data>
  <data name="TimeForHairCare" xml:space="preserve">
    <value>Time for Hair Care</value>
  </data>
  <data name="TodayIs" xml:space="preserve">
    <value>Today is:</value>
  </data>
  <data name="ReminderForHairCare" xml:space="preserve">
    <value>Reminder for Hair Care</value>
  </data>
  <data name="TomorrowIs" xml:space="preserve">
    <value>Tomorrow is:</value>
  </data>
  <data name="Prepoo" xml:space="preserve">
    <value>Pre-poo</value>
  </data>
  <data name="PrepooDescription" xml:space="preserve">
    <value>An oil treatment applied to hair prior to shampooing or conditioning</value>
  </data>
  <data name="HotOilTreatment" xml:space="preserve">
    <value>Hot oil treatment</value>
  </data>
  <data name="HotOilTreatmentDescription" xml:space="preserve">
    <value>Wash your hair. Make a water bath. Heat your coconut oil. Wet hair, if it is not already wet. Massage the oil into your scalp using fingertips dipped in the hot oil. Heat a towel with a hair dryer or clothes dryer. Wash and rinse hair thoroughly</value>
  </data>
  <data name="Shampoo" xml:space="preserve">
    <value>Shampoo</value>
  </data>
  <data name="ShampooDescription" xml:space="preserve">
    <value>Wash your hair with shampoo</value>
  </data>
  <data name="ClarifyingShampoo" xml:space="preserve">
    <value>Clarifying Shampoo</value>
  </data>
  <data name="ClarifyingShampooDescription" xml:space="preserve">
    <value>For best results. massage the clarifying shampoo into your roots where most major product buildup is, then work the shampoo through the rest of hair.</value>
  </data>
  <data name="Conditioner" xml:space="preserve">
    <value>Conditioner</value>
  </data>
  <data name="ConditionerDescription" xml:space="preserve">
    <value>Wash your hair. Rinse your shampoo. Wring your hair out. Put on your flush.
Let the rinse take effect. Rinse the rinse</value>
  </data>
  <data name="DeepConditioner" xml:space="preserve">
    <value>Deep Conditioner</value>
  </data>
  <data name="DeepConditionerDescription" xml:space="preserve">
    <value>After applying a deep conditioner, cover your hair with a shower cap or plastic bag and add low heat (wrap a warm, damp towel around your head.) This opens up the cuticle and allows the deep conditioner to penetrate your hair. Leave in the DC for at least 20 minutes (we recommend 20-40.)</value>
  </data>
  <data name="ProteinTreatment" xml:space="preserve">
    <value>Protein Treatment</value>
  </data>
  <data name="ProteinTreatmentDescription" xml:space="preserve">
    <value>Just like your body, your hair needs protein in order to stay healthy. ... Protein treatments boost the hair with a variety of nutrients and proteins to help reconstruct and strengthen hair strands.</value>
  </data>
  <data name="MoisturisingMask" xml:space="preserve">
    <value>Moisturising mask </value>
  </data>
  <data name="MoisturisingMaskDescription" xml:space="preserve">
    <value>Part your hair down the center and start by applying it down the part and on your scalp. Let this mask sit for 30-45 minutes and then rinse with your regular shampoo and conditioner. This mask is best and most effective if used one a week</value>
  </data>
  <data name="LeaveInConditioner" xml:space="preserve">
    <value>Leave in Conditioner</value>
  </data>
  <data name="LeaveInConditionerDescription" xml:space="preserve">
    <value>Wash your hair with shampoo and apply the conditioner. Add a small amount of serum to your palm. Rub the product into your hair. Comb your hair.</value>
  </data>
  <data name="Clay" xml:space="preserve">
    <value>Clay</value>
  </data>
  <data name="ClayDescription" xml:space="preserve">
    <value>Rinse your hair with water to wet it. Pick up handfuls of hair at a time and apply the bentonite clay mask from the roots to the tips. If your hair starts drying, dampen it again with the help of a spray bottle. Roll up your hair and put on a shower cap</value>
  </data>
  <data name="Rinse" xml:space="preserve">
    <value>Rinse</value>
  </data>
  <data name="RinseDescription" xml:space="preserve">
    <value>Wash your hair. Rinse it off. Apply a small amount of conditioner. Massage into hair. Wait two minutes. Rinse the hair.</value>
  </data>
</root>